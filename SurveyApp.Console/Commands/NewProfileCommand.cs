using SurveyApp.Application.Commands;
using SurveyApp.Application.Services;
using SurveyApp.Core.Common;
using SurveyApp.Core.Interfaces;
using SurveyApp.Console.UI;

namespace SurveyApp.Console.Commands;

public sealed class NewProfileCommand : ICommand
{
    private readonly IConsoleUI _consoleUI;
    private readonly ApplicationContext _context;
    private readonly SurveyBuilderFactory _surveyBuilderFactory;
    private ISurveyBuilder? _surveyBuilder;

    public string Name => "-new_profile";
    public string Description => "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É";

    public NewProfileCommand(
        IConsoleUI consoleUI, 
        ApplicationContext context,
        SurveyBuilderFactory surveyBuilderFactory)
    {
        _consoleUI = consoleUI;
        _context = context;
        _surveyBuilderFactory = surveyBuilderFactory;
    }

    public async Task<Result> ExecuteAsync(string[] args)
    {
        _surveyBuilder = _surveyBuilderFactory.CreateSurveyBuilder("developer");
        _context.CurrentSurveyBuilder = _surveyBuilder;
        _context.IsInSurveyMode = true;
        _context.CurrentQuestionIndex = 0;

        await FillSurveyAsync().ConfigureAwait(false);

        return Result.Success();
    }

    private async Task FillSurveyAsync()
    {
        var totalQuestions = _surveyBuilder!.GetQuestionCount();

        while (_context.CurrentQuestionIndex < totalQuestions)
        {
            ShowProgress();
            
            var prompt = _surveyBuilder.GetQuestionPrompt(_context.CurrentQuestionIndex);
            _consoleUI.WriteLine($"{_context.CurrentQuestionIndex + 1}. {prompt}");
            
            ShowCurrentAnswer(_context.CurrentQuestionIndex);

            var input = _consoleUI.ReadLine();

            if (IsNavigationCommand(input))
            {
                HandleNavigationCommand(input);
                continue;
            }

            if (string.IsNullOrWhiteSpace(input) && _surveyBuilder.HasAnswer(_context.CurrentQuestionIndex))
            {
                _consoleUI.WriteLine("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç");
                _context.CurrentQuestionIndex++;
            }
            else
            {
                var result = _surveyBuilder.SetAnswer(_context.CurrentQuestionIndex, input);
                if (result.IsValid)
                {
                    _consoleUI.WriteLine("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
                    _context.CurrentQuestionIndex++;
                }
                else
                {
                    _consoleUI.ShowError(result.ErrorMessage);
                }
            }
        }

        var validationResult = _surveyBuilder.ValidateCompleteness();
        if (!validationResult.IsValid)
        {
            _consoleUI.ShowError(validationResult.ErrorMessage);
            _consoleUI.WriteLine("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º:");
            _consoleUI.WriteLine("  -goto_question <–Ω–æ–º–µ—Ä> - –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É");
            _consoleUI.WriteLine("  -goto_prev_question - –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É");
            _consoleUI.WriteLine("  -restart_profile - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ");
            
            // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã, –ø–æ–∑–≤–æ–ª—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            while (_context.IsInSurveyMode)
            {
                _consoleUI.WriteLine("");
                _consoleUI.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ");
                var navInput = _consoleUI.ReadLine().Trim();
                
                if (string.IsNullOrWhiteSpace(navInput))
                    continue;
                    
                if (IsNavigationCommand(navInput))
                {
                    HandleNavigationCommand(navInput);
                    if (!_context.IsInSurveyMode) break; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    await ContinueSurveyFromCurrentQuestion();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    var newValidationResult = _surveyBuilder.ValidateCompleteness();
                    if (newValidationResult.IsValid)
                    {
                        // –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                        break;
                    }
                    else
                    {
                        _consoleUI.ShowError(newValidationResult.ErrorMessage);
                        continue;
                    }
                }
                else
                {
                    _consoleUI.ShowError("–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -goto_question <–Ω–æ–º–µ—Ä>, -goto_prev_question –∏–ª–∏ -restart_profile");
                }
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if (_context.IsInSurveyMode)
            {
                var finalValidation = _surveyBuilder.ValidateCompleteness();
                if (!finalValidation.IsValid)
                {
                    _consoleUI.ShowError("–ê–Ω–∫–µ—Ç–∞ –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.");
                    return;
                }
            }
            else
            {
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –∏–ª–∏ –≤—ã—à–µ–ª
            }
        }

        _context.CurrentSurvey = _surveyBuilder.BuildSurvey();
        _context.IsInSurveyMode = false;

        _consoleUI.ShowSuccess("–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        _consoleUI.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    }

    private bool IsNavigationCommand(string input)
    {
        return input.StartsWith("-goto_question") ||
               input == "-goto_prev_question" ||
               input == "-restart_profile";
    }

    private void HandleNavigationCommand(string input)
    {
        var totalQuestions = _surveyBuilder!.GetQuestionCount();
        
        if (input == "-goto_prev_question")
        {
            if (_context.CurrentQuestionIndex > 0)
            {
                _context.CurrentQuestionIndex--;
            }
        }
        else if (input == "-restart_profile")
        {
            _context.CurrentQuestionIndex = 0;
            _surveyBuilder = _surveyBuilderFactory.CreateSurveyBuilder("developer");
            _context.CurrentSurveyBuilder = _surveyBuilder;
        }
        else if (input.StartsWith("-goto_question"))
        {
            var parts = input.Split(' ');
            if (parts.Length > 1 && int.TryParse(parts[1], out var questionNumber))
            {
                if (questionNumber >= 1 && questionNumber <= totalQuestions)
                {
                    _context.CurrentQuestionIndex = questionNumber - 1;
                }
            }
        }
    }

    private void ShowProgress()
    {
        var (completed, total, answeredFields, missingFields) = _surveyBuilder.GetProgress();
        
        _consoleUI.WriteLine($"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total} –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ");
        
        if (answeredFields.Any())
        {
            _consoleUI.WriteLine("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ:");
            foreach (var field in answeredFields)
            {
                _consoleUI.WriteLine($"   ‚Ä¢ {field}");
            }
        }
        
        if (missingFields.Any())
        {
            _consoleUI.WriteLine("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:");
            foreach (var field in missingFields)
            {
                _consoleUI.WriteLine($"   ‚Ä¢ {field}");
            }
        }
        
        _consoleUI.WriteLine("");
    }

    private void ShowCurrentAnswer(int questionIndex)
    {
        if (_surveyBuilder.HasAnswer(questionIndex))
        {
            var currentAnswer = _surveyBuilder.GetCurrentAnswer(questionIndex);
            _consoleUI.WriteLine($"üí° –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: {currentAnswer}");
            _consoleUI.WriteLine("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:");
        }
    }

    private async Task ContinueSurveyFromCurrentQuestion()
    {
        var totalQuestions = _surveyBuilder!.GetQuestionCount();

        while (_context.CurrentQuestionIndex < totalQuestions)
        {
            ShowProgress();
            
            var prompt = _surveyBuilder.GetQuestionPrompt(_context.CurrentQuestionIndex);
            _consoleUI.WriteLine($"{_context.CurrentQuestionIndex + 1}. {prompt}");
            
            ShowCurrentAnswer(_context.CurrentQuestionIndex);

            var input = _consoleUI.ReadLine();

            if (IsNavigationCommand(input))
            {
                HandleNavigationCommand(input);
                continue;
            }

            if (string.IsNullOrWhiteSpace(input) && _surveyBuilder.HasAnswer(_context.CurrentQuestionIndex))
            {
                _consoleUI.WriteLine("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç");
                _context.CurrentQuestionIndex++;
            }
            else
            {
                var result = _surveyBuilder.SetAnswer(_context.CurrentQuestionIndex, input);
                if (result.IsValid)
                {
                    _consoleUI.WriteLine("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
                    _context.CurrentQuestionIndex++;
                }
                else
                {
                    _consoleUI.ShowError(result.ErrorMessage);
                }
            }
        }
    }
}
